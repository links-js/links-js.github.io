{"version":3,"sources":["utils.coffee","utils.js","typeahead.coffee","typeahead.js","app.coffee","app.js"],"names":["getOs","getTagClass","injectCss","isYaml","stripQuotes","css","el","type","trim","indexOf","document","createElement","rel","href","innerHTML","head","appendChild","platform","navigator","toUpperCase","str","test","replace","val","cls","getEngine","getTypeIcon","setDefaults","suggestionFn","links","map","i","Bloodhound","datumTokenizer","obj","tokens","concat","tokenizers","whitespace","name","tags","url","queryTokenizer","local","identify","typeClass","join","_url","angular","module","filter","input","split","slice","arr","factory","$http","$q","$rootScope","$filter","combineObjects","getData","getObjWithLinks","reduceAllObj","response","data","config","jsyaml","load","Boolean","Object","hasOwnProperty","console","error","prevArr","curObj","link","_source","window","btoa","objArray","push","reduce","promises","urls","settings","length","get","then","err","reject","all","directive","restrict","scope","attrs","dataset","engine","options","hint","highlight","minLength","source","limit","$root","templates","suggestion","display","$","$watch","nVal","oVal","loadedLinks","typeahead","bind","e","target","open","focus","term","trigger","$localStorage","storageDefault","openFile","openPage","cache","reset","$reset","storage","$default","controller","$scope","Settings","status","clear","defaults","destroy","forEach","itags","tag","getClass","$routeParams","triggerChange","change","searchResults","search","$routeProvider","when","templateUrl","otherwise","redirectTo","run","CacheFactory","LinksLoader","maxAge","cacheFlushInterval","deleteOnExpire","storageMode","log"],"mappings":"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","file":"index.min.js","sourcesContent":["injectCss = (css) ->\n  type = undefined\n  if typeof css == 'string'\n    css = css.trim()\n  else\n    return false\n  if css.indexOf('/') == 0 or css.indexOf('http:') == 0 or css.indexOf('https:') == 0\n    type = 'link'\n  else\n    type = 'style'\n  el = document.createElement(type)\n  el.type = 'text/css'\n  if type == 'link'\n    el.rel = 'stylesheet'\n    el.href = css\n  else\n    el.innerHTML = css\n  document.head.appendChild el\n  el\n\ngetOs = ->\n  platform = navigator.platform.toUpperCase()\n  if platform.indexOf('MAC') > -1\n    return 'mac'\n  if platform.indexOf('WIN') > -1\n    return 'windows'\n  if platform.indexOf('LINUX') > -1\n    return 'linux'\n  'windows'\n\nisYaml = (str) ->\n  /\\.(ya?ml)$/.test str\n\nstripQuotes = (str) ->\n  str.replace /^\"(.*)\"$/, '$1'\n\ngetTagClass = (val) ->\n  cls = 1\n  cls = 10 if val > 10\n  cls = 25 if val > 25\n  cls = 50 if val > 50\n  cls = 100 if val > 100\n  'tag-' + cls\n","var getOs, getTagClass, injectCss, isYaml, stripQuotes;\n\ninjectCss = function(css) {\n  var el, type;\n  type = void 0;\n  if (typeof css === 'string') {\n    css = css.trim();\n  } else {\n    return false;\n  }\n  if (css.indexOf('/') === 0 || css.indexOf('http:') === 0 || css.indexOf('https:') === 0) {\n    type = 'link';\n  } else {\n    type = 'style';\n  }\n  el = document.createElement(type);\n  el.type = 'text/css';\n  if (type === 'link') {\n    el.rel = 'stylesheet';\n    el.href = css;\n  } else {\n    el.innerHTML = css;\n  }\n  document.head.appendChild(el);\n  return el;\n};\n\ngetOs = function() {\n  var platform;\n  platform = navigator.platform.toUpperCase();\n  if (platform.indexOf('MAC') > -1) {\n    return 'mac';\n  }\n  if (platform.indexOf('WIN') > -1) {\n    return 'windows';\n  }\n  if (platform.indexOf('LINUX') > -1) {\n    return 'linux';\n  }\n  return 'windows';\n};\n\nisYaml = function(str) {\n  return /\\.(ya?ml)$/.test(str);\n};\n\nstripQuotes = function(str) {\n  return str.replace(/^\"(.*)\"$/, '$1');\n};\n\ngetTagClass = function(val) {\n  var cls;\n  cls = 1;\n  if (val > 10) {\n    cls = 10;\n  }\n  if (val > 25) {\n    cls = 25;\n  }\n  if (val > 50) {\n    cls = 50;\n  }\n  if (val > 100) {\n    cls = 100;\n  }\n  return 'tag-' + cls;\n};\n","setDefaults = (links) ->\n  links.map (i) ->\n    i.type = 'page' if typeof i.type == 'undefined'\n    i\n\ngetEngine = (links) ->\n  links = setDefaults(links)\n  new Bloodhound\n    datumTokenizer: (obj) ->\n      tokens = []\n      tokens = tokens\n        .concat Bloodhound.tokenizers.whitespace(obj.name.replace(/[\\(\\)]/g, ''))\n        .concat obj.tags.map((i) -> '#' + i)\n        .concat ':' + obj.type\n        .concat obj.url\n      tokens\n    queryTokenizer: Bloodhound.tokenizers.whitespace\n    local: links\n    identify: (obj) -> obj.name\n\ngetTypeIcon = (type) ->\n  typeClass = ''\n  switch type\n    when 'file' then typeClass = 'fa-download'\n    when 'bookmark' then typeClass = 'fa-bookmark'\n    else typeClass = 'fa-external-link-square'\n  typeClass\n\nsuggestionFn = (obj) ->\n  tags = obj.tags.map((i) -> '#' + i).join(' ')\n  \"\"\"\n  <div><div class=\"ta-obj\">\n    <div class=\"ta-row\">\n      <span class=\"name\">#{obj.name}</span>\n      <span class=\"type\"><i class=\"fa #{getTypeIcon(obj.type)}\"></i></span>\n      <span class=\"tags\">#{tags}</span>\n    </div>\n    <div class=\"ta-row\">\n      <span class=\"url\">#{obj._url}</span>\n    </div>\n  </div></div>\n  \"\"\"\n\n","var getEngine, getTypeIcon, setDefaults, suggestionFn;\n\nsetDefaults = function(links) {\n  return links.map(function(i) {\n    if (typeof i.type === 'undefined') {\n      i.type = 'page';\n    }\n    return i;\n  });\n};\n\ngetEngine = function(links) {\n  links = setDefaults(links);\n  return new Bloodhound({\n    datumTokenizer: function(obj) {\n      var tokens;\n      tokens = [];\n      tokens = tokens.concat(Bloodhound.tokenizers.whitespace(obj.name.replace(/[\\(\\)]/g, ''))).concat(obj.tags.map(function(i) {\n        return '#' + i;\n      })).concat(':' + obj.type).concat(obj.url);\n      return tokens;\n    },\n    queryTokenizer: Bloodhound.tokenizers.whitespace,\n    local: links,\n    identify: function(obj) {\n      return obj.name;\n    }\n  });\n};\n\ngetTypeIcon = function(type) {\n  var typeClass;\n  typeClass = '';\n  switch (type) {\n    case 'file':\n      typeClass = 'fa-download';\n      break;\n    case 'bookmark':\n      typeClass = 'fa-bookmark';\n      break;\n    default:\n      typeClass = 'fa-external-link-square';\n  }\n  return typeClass;\n};\n\nsuggestionFn = function(obj) {\n  var tags;\n  tags = obj.tags.map(function(i) {\n    return '#' + i;\n  }).join(' ');\n  return \"<div><div class=\\\"ta-obj\\\">\\n  <div class=\\\"ta-row\\\">\\n    <span class=\\\"name\\\">\" + obj.name + \"</span>\\n    <span class=\\\"type\\\"><i class=\\\"fa \" + (getTypeIcon(obj.type)) + \"\\\"></i></span>\\n    <span class=\\\"tags\\\">\" + tags + \"</span>\\n  </div>\\n  <div class=\\\"ta-row\\\">\\n    <span class=\\\"url\\\">\" + obj._url + \"</span>\\n  </div>\\n</div></div>\";\n};\n","angular\n  .module 'App', ['ngRoute', 'ngStorage', 'angular-cache']\n\n  .filter 'tagReplace', -> (input) -> if input then input.replace(/tag:/gi, '#') else ''\n  .filter 'noReferrer', -> (input) -> 'https://href.li/?' + input\n  .filter 'filename', -> (input) -> input.split('/').slice(-1)[0]\n  .filter 'getFaviconUrl', -> (input) -> 'https://www.google.com/s2/favicons?domain_url=' + input\n  .filter 'getLastItem', -> (arr) -> arr.slice(-1)[0]\n\n  .factory 'LinksLoader', ($http, $q, $rootScope, $filter) ->\n    getData = (response) ->\n      url = response.config.url\n      data = null\n      data = if isYaml(url) then data = jsyaml.load(response.data) else data = response.data\n      # Add _url to all response data object\n      data._url = url\n      data\n\n    getObjWithLinks = (obj) ->\n      if Boolean(obj) and (obj instanceof Object)\n        if obj.hasOwnProperty 'links'\n          return true\n      console.error 'Incorrect object:', obj\n      return false\n\n    reduceAllObj = (prevArr, curObj) ->\n      # _source for identify - base64\n      links = curObj.links.map (link) ->\n        link._url = curObj._url\n        link._source = window.btoa(curObj._url)\n        link\n      prevArr.concat(links)\n\n    combineObjects = (objArray) ->\n      # discard everything else that doesn't have 'links' property then combine all files\n      objArray.push objArray.filter(getObjWithLinks).reduce(reduceAllObj, [])\n      objArray\n\n    {\n      load: ->\n        urls = $rootScope.settings.url.split('\\n').filter((url) -> url.length > 0)\n        promises = urls.map (url) ->\n          $http.get(url).then getData, (err) ->\n            console.error 'HTTP error:', err\n            $q.reject err\n        $q.all(promises).then(combineObjects).then $filter('getLastItem')\n    }\n\n  .directive 'myTypeahead', ->\n    {\n      restrict: 'C'\n      scope: true\n      link: (scope, el, attrs) ->\n        options =\n          hint: false\n          highlight: true\n          minLength: 1\n        dataset =\n          name: 'links'\n          source: null\n          limit: scope.$root.settings.limit\n          templates: suggestion: suggestionFn\n          display: 'name'\n        input = $(el[0])\n        engine = null\n        scope.$root.$watch 'loadedLinks', (nVal, oVal) ->\n          if nVal != null\n            dataset.source = getEngine(scope.$root.loadedLinks)\n            input.typeahead options, dataset\n            input.bind 'typeahead:select', (e, obj) ->\n              target = scope.$root.settings[if obj.type == 'page' then 'openPage' else 'openFile']\n              target = stripQuotes(target)\n              target = if target == 'new' then '_blank' else '_self'\n              window.open obj.url, target\n          input.focus()\n        scope.$watch 'term', -> input.val(scope.term).trigger('input').focus()\n    }\n\n  .factory 'Settings', ($localStorage) ->\n    urls = [\n      '/db/db-global.yml'\n      '/db/db-' + getOs() + '.yml'\n    ].join('\\n')\n\n    storageDefault =\n      url: urls\n      openFile: 'current'\n      openPage: 'new'\n      cache: true\n      limit: 10\n\n    {\n      reset: -> $localStorage.$reset storageDefault\n      storage: $localStorage.$default(storageDefault)\n    }\n\n  .controller 'SettingsCtrl', ($scope, $rootScope, Settings, $http) ->\n    status = ->\n      $scope.status = 'Please reload page'\n\n    $scope.reset = ->\n      Settings.reset()\n      status()\n\n    $scope.clear = ->\n      $http.defaults.cache.destroy()\n      status()\n\n  .controller 'TagsCtrl', ($scope, $rootScope) ->\n    tags = {}\n    $rootScope.loadedLinks\n      .map (i) -> i.tags\n      .forEach (itags) ->\n        itags.forEach (tag) ->\n          tags[tag] = if tags.hasOwnProperty(tag) then tags[tag] + 1 else 1\n\n    $scope.getClass = getTagClass\n    $scope.tags = tags\n\n  .controller 'TypeCtrl', ($scope, $routeParams, $filter) ->\n    $scope.term = $filter('tagReplace')($routeParams.term)\n\n  .controller 'ListCtrl', ($scope, $routeParams, $filter) ->\n    engine = null\n\n    triggerChange = -> $scope.change() if $scope.term.length > 0\n\n    $scope.$root.$watch 'loadedLinks', (nVal, oVal) ->\n      engine = getEngine($scope.$root.loadedLinks)\n      triggerChange()\n\n    $scope.searchResults = []\n\n    $scope.change = -> engine.search($scope.term.trim(), (links) -> $scope.searchResults = links) if engine\n\n    $scope.term = $filter('tagReplace')($routeParams.term)\n    triggerChange()\n\n  .config ($routeProvider) ->\n    $routeProvider\n      .when '/type/:term?', templateUrl: 'typeahead.html', controller: 'TypeCtrl'\n      .when '/list/:term?', templateUrl: 'list.html', controller: 'ListCtrl'\n      .when '/tags', templateUrl: 'tags.html'\n      .otherwise redirectTo: '/type'\n\n  .run ($http, $rootScope, Settings, CacheFactory, LinksLoader) ->\n    $rootScope.settings = Settings.storage\n\n    injectCss $rootScope.settings.css if $rootScope.settings.css != null\n\n    if $rootScope.settings.cache == true\n      $http.defaults.cache = CacheFactory 'defaultCache',\n        maxAge: 15 * 60 * 1000\n        cacheFlushInterval: 60 * 60 * 1000\n        deleteOnExpire: 'aggressive'\n        storageMode: 'localStorage'\n\n    LinksLoader.load().then (links) ->\n      console.log 'Links are loaded:', links.length\n      $rootScope.loadedLinks = links\n","angular.module('App', ['ngRoute', 'ngStorage', 'angular-cache']).filter('tagReplace', function() {\n  return function(input) {\n    if (input) {\n      return input.replace(/tag:/gi, '#');\n    } else {\n      return '';\n    }\n  };\n}).filter('noReferrer', function() {\n  return function(input) {\n    return 'https://href.li/?' + input;\n  };\n}).filter('filename', function() {\n  return function(input) {\n    return input.split('/').slice(-1)[0];\n  };\n}).filter('getFaviconUrl', function() {\n  return function(input) {\n    return 'https://www.google.com/s2/favicons?domain_url=' + input;\n  };\n}).filter('getLastItem', function() {\n  return function(arr) {\n    return arr.slice(-1)[0];\n  };\n}).factory('LinksLoader', function($http, $q, $rootScope, $filter) {\n  var combineObjects, getData, getObjWithLinks, reduceAllObj;\n  getData = function(response) {\n    var data, url;\n    url = response.config.url;\n    data = null;\n    data = isYaml(url) ? data = jsyaml.load(response.data) : data = response.data;\n    data._url = url;\n    return data;\n  };\n  getObjWithLinks = function(obj) {\n    if (Boolean(obj) && (obj instanceof Object)) {\n      if (obj.hasOwnProperty('links')) {\n        return true;\n      }\n    }\n    console.error('Incorrect object:', obj);\n    return false;\n  };\n  reduceAllObj = function(prevArr, curObj) {\n    var links;\n    links = curObj.links.map(function(link) {\n      link._url = curObj._url;\n      link._source = window.btoa(curObj._url);\n      return link;\n    });\n    return prevArr.concat(links);\n  };\n  combineObjects = function(objArray) {\n    objArray.push(objArray.filter(getObjWithLinks).reduce(reduceAllObj, []));\n    return objArray;\n  };\n  return {\n    load: function() {\n      var promises, urls;\n      urls = $rootScope.settings.url.split('\\n').filter(function(url) {\n        return url.length > 0;\n      });\n      promises = urls.map(function(url) {\n        return $http.get(url).then(getData, function(err) {\n          console.error('HTTP error:', err);\n          return $q.reject(err);\n        });\n      });\n      return $q.all(promises).then(combineObjects).then($filter('getLastItem'));\n    }\n  };\n}).directive('myTypeahead', function() {\n  return {\n    restrict: 'C',\n    scope: true,\n    link: function(scope, el, attrs) {\n      var dataset, engine, input, options;\n      options = {\n        hint: false,\n        highlight: true,\n        minLength: 1\n      };\n      dataset = {\n        name: 'links',\n        source: null,\n        limit: scope.$root.settings.limit,\n        templates: {\n          suggestion: suggestionFn\n        },\n        display: 'name'\n      };\n      input = $(el[0]);\n      engine = null;\n      scope.$root.$watch('loadedLinks', function(nVal, oVal) {\n        if (nVal !== null) {\n          dataset.source = getEngine(scope.$root.loadedLinks);\n          input.typeahead(options, dataset);\n          input.bind('typeahead:select', function(e, obj) {\n            var target;\n            target = scope.$root.settings[obj.type === 'page' ? 'openPage' : 'openFile'];\n            target = stripQuotes(target);\n            target = target === 'new' ? '_blank' : '_self';\n            return window.open(obj.url, target);\n          });\n        }\n        return input.focus();\n      });\n      return scope.$watch('term', function() {\n        return input.val(scope.term).trigger('input').focus();\n      });\n    }\n  };\n}).factory('Settings', function($localStorage) {\n  var storageDefault, urls;\n  urls = ['/db/db-global.yml', '/db/db-' + getOs() + '.yml'].join('\\n');\n  storageDefault = {\n    url: urls,\n    openFile: 'current',\n    openPage: 'new',\n    cache: true,\n    limit: 10\n  };\n  return {\n    reset: function() {\n      return $localStorage.$reset(storageDefault);\n    },\n    storage: $localStorage.$default(storageDefault)\n  };\n}).controller('SettingsCtrl', function($scope, $rootScope, Settings, $http) {\n  var status;\n  status = function() {\n    return $scope.status = 'Please reload page';\n  };\n  $scope.reset = function() {\n    Settings.reset();\n    return status();\n  };\n  return $scope.clear = function() {\n    $http.defaults.cache.destroy();\n    return status();\n  };\n}).controller('TagsCtrl', function($scope, $rootScope) {\n  var tags;\n  tags = {};\n  $rootScope.loadedLinks.map(function(i) {\n    return i.tags;\n  }).forEach(function(itags) {\n    return itags.forEach(function(tag) {\n      return tags[tag] = tags.hasOwnProperty(tag) ? tags[tag] + 1 : 1;\n    });\n  });\n  $scope.getClass = getTagClass;\n  return $scope.tags = tags;\n}).controller('TypeCtrl', function($scope, $routeParams, $filter) {\n  return $scope.term = $filter('tagReplace')($routeParams.term);\n}).controller('ListCtrl', function($scope, $routeParams, $filter) {\n  var engine, triggerChange;\n  engine = null;\n  triggerChange = function() {\n    if ($scope.term.length > 0) {\n      return $scope.change();\n    }\n  };\n  $scope.$root.$watch('loadedLinks', function(nVal, oVal) {\n    engine = getEngine($scope.$root.loadedLinks);\n    return triggerChange();\n  });\n  $scope.searchResults = [];\n  $scope.change = function() {\n    if (engine) {\n      return engine.search($scope.term.trim(), function(links) {\n        return $scope.searchResults = links;\n      });\n    }\n  };\n  $scope.term = $filter('tagReplace')($routeParams.term);\n  return triggerChange();\n}).config(function($routeProvider) {\n  return $routeProvider.when('/type/:term?', {\n    templateUrl: 'typeahead.html',\n    controller: 'TypeCtrl'\n  }).when('/list/:term?', {\n    templateUrl: 'list.html',\n    controller: 'ListCtrl'\n  }).when('/tags', {\n    templateUrl: 'tags.html'\n  }).otherwise({\n    redirectTo: '/type'\n  });\n}).run(function($http, $rootScope, Settings, CacheFactory, LinksLoader) {\n  $rootScope.settings = Settings.storage;\n  if ($rootScope.settings.css !== null) {\n    injectCss($rootScope.settings.css);\n  }\n  if ($rootScope.settings.cache === true) {\n    $http.defaults.cache = CacheFactory('defaultCache', {\n      maxAge: 15 * 60 * 1000,\n      cacheFlushInterval: 60 * 60 * 1000,\n      deleteOnExpire: 'aggressive',\n      storageMode: 'localStorage'\n    });\n  }\n  return LinksLoader.load().then(function(links) {\n    console.log('Links are loaded:', links.length);\n    return $rootScope.loadedLinks = links;\n  });\n});\n"],"sourceRoot":"/source/"}