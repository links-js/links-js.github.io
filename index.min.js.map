{"version":3,"sources":["utils.coffee","utils.js","typeahead.coffee","typeahead.js","app.coffee","app.js"],"names":["getIconForOs","getOs","getTagClass","injectCss","isYaml","isYamlOrJson","splitThenAdd","stripQuotes","css","el","type","trim","indexOf","document","createElement","rel","href","innerHTML","head","appendChild","platform","navigator","toUpperCase","str","test","replace","val","cls","add","split","concat","join","includes","getEngine","getTypeIcon","setDefaults","suggestionFn","links","map","i","Bloodhound","datumTokenizer","obj","tokens","tokenizers","whitespace","name","tags","url","queryTokenizer","local","identify","typeClass","_url","angular","module","constant","filter","input","slice","arr","factory","$http","$q","$rootScope","$filter","combineObjects","getData","getObjWithLinks","reduceAllObj","response","data","config","jsyaml","load","Boolean","Object","hasOwnProperty","console","error","prevArr","curObj","link","_source","window","btoa","objArray","push","reduce","promises","urls","settings","length","get","then","err","reject","all","directive","restrict","scope","attrs","dataset","engine","options","hint","highlight","minLength","source","limit","$root","templates","suggestion","display","$","$watch","nVal","oVal","loadedLinks","typeahead","bind","e","target","open","focus","term","trigger","$localStorage","storageDefault","openFile","openPage","cache","reset","$reset","storage","$default","controller","$scope","Settings","sourcesUrl","status","res","sources","addSource","path","style","clear","defaults","destroy","forEach","itags","tag","getClass","$routeParams","triggerChange","change","searchResults","search","$routeProvider","when","templateUrl","otherwise","redirectTo","run","CacheFactory","LinksLoader","maxAge","cacheFlushInterval","deleteOnExpire","storageMode","log"],"mappings":"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","file":"index.min.js","sourcesContent":["injectCss = (css) ->\n  type = undefined\n  if typeof css == 'string'\n    css = css.trim()\n  else\n    return false\n  if css.indexOf('/') == 0 or css.indexOf('http:') == 0 or css.indexOf('https:') == 0\n    type = 'link'\n  else\n    type = 'style'\n  el = document.createElement(type)\n  el.type = 'text/css'\n  if type == 'link'\n    el.rel = 'stylesheet'\n    el.href = css\n  else\n    el.innerHTML = css\n  document.head.appendChild el\n  el\n\ngetOs = ->\n  platform = navigator.platform.toUpperCase()\n  if platform.indexOf('MAC') > -1\n    return 'mac'\n  if platform.indexOf('WIN') > -1\n    return 'windows'\n  if platform.indexOf('LINUX') > -1\n    return 'linux'\n  'windows'\n\nisYamlOrJson = (str) ->\n  /\\.(ya?ml|json)$/.test str\n\nisYaml = (str) ->\n  /\\.(ya?ml)$/.test str\n\nstripQuotes = (str) ->\n  str.replace /^\"(.*)\"$/, '$1'\n\ngetTagClass = (val) ->\n  cls = 1\n  cls = 10 if val > 10\n  cls = 25 if val > 25\n  cls = 50 if val > 50\n  cls = 100 if val > 100\n  'tag-' + cls\n\nsplitThenAdd = (val, add) ->\n  val.split('\\n').concat(add).join('\\n')\n\ngetIconForOs = (str) ->\n  return 'fa-apple' if str.includes 'mac'\n  return 'fa-windows' if str.includes 'windows'\n  return 'fa-linux' if str.includes 'linux'\n  return ''\n","var getIconForOs, getOs, getTagClass, injectCss, isYaml, isYamlOrJson, splitThenAdd, stripQuotes;\n\ninjectCss = function(css) {\n  var el, type;\n  type = void 0;\n  if (typeof css === 'string') {\n    css = css.trim();\n  } else {\n    return false;\n  }\n  if (css.indexOf('/') === 0 || css.indexOf('http:') === 0 || css.indexOf('https:') === 0) {\n    type = 'link';\n  } else {\n    type = 'style';\n  }\n  el = document.createElement(type);\n  el.type = 'text/css';\n  if (type === 'link') {\n    el.rel = 'stylesheet';\n    el.href = css;\n  } else {\n    el.innerHTML = css;\n  }\n  document.head.appendChild(el);\n  return el;\n};\n\ngetOs = function() {\n  var platform;\n  platform = navigator.platform.toUpperCase();\n  if (platform.indexOf('MAC') > -1) {\n    return 'mac';\n  }\n  if (platform.indexOf('WIN') > -1) {\n    return 'windows';\n  }\n  if (platform.indexOf('LINUX') > -1) {\n    return 'linux';\n  }\n  return 'windows';\n};\n\nisYamlOrJson = function(str) {\n  return /\\.(ya?ml|json)$/.test(str);\n};\n\nisYaml = function(str) {\n  return /\\.(ya?ml)$/.test(str);\n};\n\nstripQuotes = function(str) {\n  return str.replace(/^\"(.*)\"$/, '$1');\n};\n\ngetTagClass = function(val) {\n  var cls;\n  cls = 1;\n  if (val > 10) {\n    cls = 10;\n  }\n  if (val > 25) {\n    cls = 25;\n  }\n  if (val > 50) {\n    cls = 50;\n  }\n  if (val > 100) {\n    cls = 100;\n  }\n  return 'tag-' + cls;\n};\n\nsplitThenAdd = function(val, add) {\n  return val.split('\\n').concat(add).join('\\n');\n};\n\ngetIconForOs = function(str) {\n  if (str.includes('mac')) {\n    return 'fa-apple';\n  }\n  if (str.includes('windows')) {\n    return 'fa-windows';\n  }\n  if (str.includes('linux')) {\n    return 'fa-linux';\n  }\n  return '';\n};\n","setDefaults = (links) ->\n  links.map (i) ->\n    i.type = 'page' if typeof i.type == 'undefined'\n    i\n\ngetEngine = (links) ->\n  links = setDefaults(links)\n  new Bloodhound\n    datumTokenizer: (obj) ->\n      tokens = []\n      tokens = tokens\n        .concat Bloodhound.tokenizers.whitespace(obj.name.replace(/[\\(\\)]/g, ''))\n        .concat obj.tags.map((i) -> '#' + i)\n        .concat ':' + obj.type\n        .concat obj.url\n      tokens\n    queryTokenizer: Bloodhound.tokenizers.whitespace\n    local: links\n    identify: (obj) -> obj.name\n\ngetTypeIcon = (type) ->\n  typeClass = ''\n  switch type\n    when 'file' then typeClass = 'fa-download'\n    when 'bookmark' then typeClass = 'fa-bookmark'\n    else typeClass = 'fa-external-link-square'\n  typeClass\n\nsuggestionFn = (obj) ->\n  tags = obj.tags.map((i) -> '#' + i).join(' ')\n  \"\"\"\n  <div><div class=\"ta-obj\">\n    <div class=\"ta-row\">\n      <span class=\"name\">#{obj.name}</span>\n      <span class=\"type\"><i class=\"fa #{getTypeIcon(obj.type)}\"></i></span>\n      <span class=\"tags\">#{tags}</span>\n    </div>\n    <div class=\"ta-row\">\n      <span class=\"url\">#{obj._url}</span>\n    </div>\n  </div></div>\n  \"\"\"\n\n","var getEngine, getTypeIcon, setDefaults, suggestionFn;\n\nsetDefaults = function(links) {\n  return links.map(function(i) {\n    if (typeof i.type === 'undefined') {\n      i.type = 'page';\n    }\n    return i;\n  });\n};\n\ngetEngine = function(links) {\n  links = setDefaults(links);\n  return new Bloodhound({\n    datumTokenizer: function(obj) {\n      var tokens;\n      tokens = [];\n      tokens = tokens.concat(Bloodhound.tokenizers.whitespace(obj.name.replace(/[\\(\\)]/g, ''))).concat(obj.tags.map(function(i) {\n        return '#' + i;\n      })).concat(':' + obj.type).concat(obj.url);\n      return tokens;\n    },\n    queryTokenizer: Bloodhound.tokenizers.whitespace,\n    local: links,\n    identify: function(obj) {\n      return obj.name;\n    }\n  });\n};\n\ngetTypeIcon = function(type) {\n  var typeClass;\n  typeClass = '';\n  switch (type) {\n    case 'file':\n      typeClass = 'fa-download';\n      break;\n    case 'bookmark':\n      typeClass = 'fa-bookmark';\n      break;\n    default:\n      typeClass = 'fa-external-link-square';\n  }\n  return typeClass;\n};\n\nsuggestionFn = function(obj) {\n  var tags;\n  tags = obj.tags.map(function(i) {\n    return '#' + i;\n  }).join(' ');\n  return \"<div><div class=\\\"ta-obj\\\">\\n  <div class=\\\"ta-row\\\">\\n    <span class=\\\"name\\\">\" + obj.name + \"</span>\\n    <span class=\\\"type\\\"><i class=\\\"fa \" + (getTypeIcon(obj.type)) + \"\\\"></i></span>\\n    <span class=\\\"tags\\\">\" + tags + \"</span>\\n  </div>\\n  <div class=\\\"ta-row\\\">\\n    <span class=\\\"url\\\">\" + obj._url + \"</span>\\n  </div>\\n</div></div>\";\n};\n","angular\n  .module 'App', ['ngRoute', 'ngStorage', 'angular-cache']\n\n  .constant 'sourcesUrl', 'https://api.github.com/repos/links-js/db/contents/'\n\n  .filter 'tagReplace', -> (input) -> if input then input.replace(/tag:/gi, '#') else ''\n  .filter 'noReferrer', -> (input) -> 'https://href.li/?' + input\n  .filter 'filename', -> (input) -> input.split('/').slice(-1)[0]\n  .filter 'getFaviconUrl', -> (input) -> 'https://www.google.com/s2/favicons?domain_url=' + input\n  .filter 'getLastItem', -> (arr) -> arr.slice(-1)[0]\n  .filter 'hasYamlOrJson', -> (obj) -> isYamlOrJson(obj.name)\n  .filter 'getIconForOs', -> getIconForOs\n\n  .factory 'LinksLoader', ($http, $q, $rootScope, $filter) ->\n    getData = (response) ->\n      url = response.config.url\n      data = null\n      data = if isYaml(url) then data = jsyaml.load(response.data) else data = response.data\n      # Add _url to all response data object\n      data._url = url\n      data\n\n    getObjWithLinks = (obj) ->\n      if Boolean(obj) and (obj instanceof Object)\n        if obj.hasOwnProperty 'links'\n          return true\n      console.error 'Incorrect object:', obj\n      return false\n\n    reduceAllObj = (prevArr, curObj) ->\n      # _source for identify - base64\n      links = curObj.links.map (link) ->\n        link._url = curObj._url\n        link._source = window.btoa(curObj._url)\n        link\n      prevArr.concat(links)\n\n    combineObjects = (objArray) ->\n      # discard everything else that doesn't have 'links' property then combine all files\n      objArray.push objArray.filter(getObjWithLinks).reduce(reduceAllObj, [])\n      objArray\n\n    {\n      load: ->\n        urls = $rootScope.settings.url.split('\\n').filter((url) -> url.length > 0)\n        promises = urls.map (url) ->\n          $http.get(url).then getData, (err) ->\n            console.error 'HTTP error:', err\n            $q.reject err\n        $q.all(promises).then(combineObjects).then $filter('getLastItem')\n    }\n\n  .directive 'myTypeahead', ->\n    {\n      restrict: 'C'\n      scope: true\n      link: (scope, el, attrs) ->\n        options =\n          hint: false\n          highlight: true\n          minLength: 1\n        dataset =\n          name: 'links'\n          source: null\n          limit: scope.$root.settings.limit\n          templates: suggestion: suggestionFn\n          display: 'name'\n        input = $(el[0])\n        engine = null\n        scope.$root.$watch 'loadedLinks', (nVal, oVal) ->\n          if nVal != null\n            dataset.source = getEngine(scope.$root.loadedLinks)\n            input.typeahead options, dataset\n            input.bind 'typeahead:select', (e, obj) ->\n              target = scope.$root.settings[if obj.type == 'page' then 'openPage' else 'openFile']\n              target = stripQuotes(target)\n              target = if target == 'new' then '_blank' else '_self'\n              window.open obj.url, target\n          input.focus()\n        scope.$watch 'term', -> input.val(scope.term).trigger('input').focus()\n    }\n\n  .factory 'Settings', ($localStorage) ->\n    urls = [\n      '/db/db-global.yml'\n      '/db/db-' + getOs() + '.yml'\n    ].join('\\n')\n\n    storageDefault =\n      url: urls\n      openFile: 'current'\n      openPage: 'new'\n      cache: true\n      limit: 10\n\n    {\n      reset: -> $localStorage.$reset storageDefault\n      storage: $localStorage.$default(storageDefault)\n    }\n\n  .controller 'SettingsCtrl', ($scope, $rootScope, Settings, $http, sourcesUrl, $filter) ->\n    status = -> $scope.status = 'Please reload page'\n\n    $http.get(sourcesUrl).then (res) ->\n      $scope.sources = res.data.filter $filter('hasYamlOrJson')\n\n    $scope.addSource = (source) ->\n      $rootScope.settings.url = splitThenAdd($rootScope.settings.url, \"/db/#{source.path}\")\n\n    $scope.style = (name) ->\n      $rootScope.settings.css = \"/styles/#{name}.css\"\n      status()\n\n    $scope.reset = ->\n      Settings.reset()\n      status()\n\n    $scope.clear = ->\n      $http.defaults.cache.destroy()\n      status()\n\n  .controller 'TagsCtrl', ($scope, $rootScope) ->\n    tags = {}\n    $rootScope.loadedLinks\n      .map (i) -> i.tags\n      .forEach (itags) ->\n        itags.forEach (tag) ->\n          tags[tag] = if tags.hasOwnProperty(tag) then tags[tag] + 1 else 1\n\n    $scope.getClass = getTagClass\n    $scope.tags = tags\n\n  .controller 'TypeCtrl', ($scope, $routeParams, $filter) ->\n    $scope.term = $filter('tagReplace')($routeParams.term)\n\n  .controller 'ListCtrl', ($scope, $routeParams, $filter) ->\n    engine = null\n\n    triggerChange = -> $scope.change() if $scope.term.length > 0\n\n    $scope.$root.$watch 'loadedLinks', (nVal, oVal) ->\n      engine = getEngine($scope.$root.loadedLinks)\n      triggerChange()\n\n    $scope.searchResults = []\n\n    $scope.change = -> engine.search($scope.term.trim(), (links) -> $scope.searchResults = links) if engine\n\n    $scope.term = $filter('tagReplace')($routeParams.term)\n    triggerChange()\n\n  .config ($routeProvider) ->\n    $routeProvider\n      .when '/type/:term?', templateUrl: 'typeahead.html', controller: 'TypeCtrl'\n      .when '/list/:term?', templateUrl: 'list.html', controller: 'ListCtrl'\n      .when '/tags', templateUrl: 'tags.html'\n      .otherwise redirectTo: '/type'\n\n  .run ($http, $rootScope, Settings, CacheFactory, LinksLoader) ->\n    $rootScope.settings = Settings.storage\n\n    injectCss $rootScope.settings.css if $rootScope.settings.css != null\n\n    if $rootScope.settings.cache == true\n      $http.defaults.cache = CacheFactory 'defaultCache',\n        maxAge: 15 * 60 * 1000\n        cacheFlushInterval: 60 * 60 * 1000\n        deleteOnExpire: 'aggressive'\n        storageMode: 'localStorage'\n\n    LinksLoader.load().then (links) ->\n      console.log 'Links are loaded:', links.length\n      $rootScope.loadedLinks = links\n","angular.module('App', ['ngRoute', 'ngStorage', 'angular-cache']).constant('sourcesUrl', 'https://api.github.com/repos/links-js/db/contents/').filter('tagReplace', function() {\n  return function(input) {\n    if (input) {\n      return input.replace(/tag:/gi, '#');\n    } else {\n      return '';\n    }\n  };\n}).filter('noReferrer', function() {\n  return function(input) {\n    return 'https://href.li/?' + input;\n  };\n}).filter('filename', function() {\n  return function(input) {\n    return input.split('/').slice(-1)[0];\n  };\n}).filter('getFaviconUrl', function() {\n  return function(input) {\n    return 'https://www.google.com/s2/favicons?domain_url=' + input;\n  };\n}).filter('getLastItem', function() {\n  return function(arr) {\n    return arr.slice(-1)[0];\n  };\n}).filter('hasYamlOrJson', function() {\n  return function(obj) {\n    return isYamlOrJson(obj.name);\n  };\n}).filter('getIconForOs', function() {\n  return getIconForOs;\n}).factory('LinksLoader', function($http, $q, $rootScope, $filter) {\n  var combineObjects, getData, getObjWithLinks, reduceAllObj;\n  getData = function(response) {\n    var data, url;\n    url = response.config.url;\n    data = null;\n    data = isYaml(url) ? data = jsyaml.load(response.data) : data = response.data;\n    data._url = url;\n    return data;\n  };\n  getObjWithLinks = function(obj) {\n    if (Boolean(obj) && (obj instanceof Object)) {\n      if (obj.hasOwnProperty('links')) {\n        return true;\n      }\n    }\n    console.error('Incorrect object:', obj);\n    return false;\n  };\n  reduceAllObj = function(prevArr, curObj) {\n    var links;\n    links = curObj.links.map(function(link) {\n      link._url = curObj._url;\n      link._source = window.btoa(curObj._url);\n      return link;\n    });\n    return prevArr.concat(links);\n  };\n  combineObjects = function(objArray) {\n    objArray.push(objArray.filter(getObjWithLinks).reduce(reduceAllObj, []));\n    return objArray;\n  };\n  return {\n    load: function() {\n      var promises, urls;\n      urls = $rootScope.settings.url.split('\\n').filter(function(url) {\n        return url.length > 0;\n      });\n      promises = urls.map(function(url) {\n        return $http.get(url).then(getData, function(err) {\n          console.error('HTTP error:', err);\n          return $q.reject(err);\n        });\n      });\n      return $q.all(promises).then(combineObjects).then($filter('getLastItem'));\n    }\n  };\n}).directive('myTypeahead', function() {\n  return {\n    restrict: 'C',\n    scope: true,\n    link: function(scope, el, attrs) {\n      var dataset, engine, input, options;\n      options = {\n        hint: false,\n        highlight: true,\n        minLength: 1\n      };\n      dataset = {\n        name: 'links',\n        source: null,\n        limit: scope.$root.settings.limit,\n        templates: {\n          suggestion: suggestionFn\n        },\n        display: 'name'\n      };\n      input = $(el[0]);\n      engine = null;\n      scope.$root.$watch('loadedLinks', function(nVal, oVal) {\n        if (nVal !== null) {\n          dataset.source = getEngine(scope.$root.loadedLinks);\n          input.typeahead(options, dataset);\n          input.bind('typeahead:select', function(e, obj) {\n            var target;\n            target = scope.$root.settings[obj.type === 'page' ? 'openPage' : 'openFile'];\n            target = stripQuotes(target);\n            target = target === 'new' ? '_blank' : '_self';\n            return window.open(obj.url, target);\n          });\n        }\n        return input.focus();\n      });\n      return scope.$watch('term', function() {\n        return input.val(scope.term).trigger('input').focus();\n      });\n    }\n  };\n}).factory('Settings', function($localStorage) {\n  var storageDefault, urls;\n  urls = ['/db/db-global.yml', '/db/db-' + getOs() + '.yml'].join('\\n');\n  storageDefault = {\n    url: urls,\n    openFile: 'current',\n    openPage: 'new',\n    cache: true,\n    limit: 10\n  };\n  return {\n    reset: function() {\n      return $localStorage.$reset(storageDefault);\n    },\n    storage: $localStorage.$default(storageDefault)\n  };\n}).controller('SettingsCtrl', function($scope, $rootScope, Settings, $http, sourcesUrl, $filter) {\n  var status;\n  status = function() {\n    return $scope.status = 'Please reload page';\n  };\n  $http.get(sourcesUrl).then(function(res) {\n    return $scope.sources = res.data.filter($filter('hasYamlOrJson'));\n  });\n  $scope.addSource = function(source) {\n    return $rootScope.settings.url = splitThenAdd($rootScope.settings.url, \"/db/\" + source.path);\n  };\n  $scope.style = function(name) {\n    $rootScope.settings.css = \"/styles/\" + name + \".css\";\n    return status();\n  };\n  $scope.reset = function() {\n    Settings.reset();\n    return status();\n  };\n  return $scope.clear = function() {\n    $http.defaults.cache.destroy();\n    return status();\n  };\n}).controller('TagsCtrl', function($scope, $rootScope) {\n  var tags;\n  tags = {};\n  $rootScope.loadedLinks.map(function(i) {\n    return i.tags;\n  }).forEach(function(itags) {\n    return itags.forEach(function(tag) {\n      return tags[tag] = tags.hasOwnProperty(tag) ? tags[tag] + 1 : 1;\n    });\n  });\n  $scope.getClass = getTagClass;\n  return $scope.tags = tags;\n}).controller('TypeCtrl', function($scope, $routeParams, $filter) {\n  return $scope.term = $filter('tagReplace')($routeParams.term);\n}).controller('ListCtrl', function($scope, $routeParams, $filter) {\n  var engine, triggerChange;\n  engine = null;\n  triggerChange = function() {\n    if ($scope.term.length > 0) {\n      return $scope.change();\n    }\n  };\n  $scope.$root.$watch('loadedLinks', function(nVal, oVal) {\n    engine = getEngine($scope.$root.loadedLinks);\n    return triggerChange();\n  });\n  $scope.searchResults = [];\n  $scope.change = function() {\n    if (engine) {\n      return engine.search($scope.term.trim(), function(links) {\n        return $scope.searchResults = links;\n      });\n    }\n  };\n  $scope.term = $filter('tagReplace')($routeParams.term);\n  return triggerChange();\n}).config(function($routeProvider) {\n  return $routeProvider.when('/type/:term?', {\n    templateUrl: 'typeahead.html',\n    controller: 'TypeCtrl'\n  }).when('/list/:term?', {\n    templateUrl: 'list.html',\n    controller: 'ListCtrl'\n  }).when('/tags', {\n    templateUrl: 'tags.html'\n  }).otherwise({\n    redirectTo: '/type'\n  });\n}).run(function($http, $rootScope, Settings, CacheFactory, LinksLoader) {\n  $rootScope.settings = Settings.storage;\n  if ($rootScope.settings.css !== null) {\n    injectCss($rootScope.settings.css);\n  }\n  if ($rootScope.settings.cache === true) {\n    $http.defaults.cache = CacheFactory('defaultCache', {\n      maxAge: 15 * 60 * 1000,\n      cacheFlushInterval: 60 * 60 * 1000,\n      deleteOnExpire: 'aggressive',\n      storageMode: 'localStorage'\n    });\n  }\n  return LinksLoader.load().then(function(links) {\n    console.log('Links are loaded:', links.length);\n    return $rootScope.loadedLinks = links;\n  });\n});\n"],"sourceRoot":"/source/"}